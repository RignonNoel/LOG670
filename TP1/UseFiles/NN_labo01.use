model GestionConvoi

--
-- C L A S S E S
--

class Manageur
operations
ListeConvoiActif() : Bag(Convoi) = self.autoroutes.convois
end

class Autoroute
attributes
Nom : String
Numero : Integer
end

class Conducteur
attributes
Nom : String
Sexe : Integer
end

class Vehicule
attributes
Direction : String
end

class Convoi
end

class Camera
attributes
Constructeur : String
Modele : String
end

class Sonar
attributes
Constructeur : String
Modele : String
end

--
-- A S S O C I A T I O N S
--

association  ManageurAutoroute between
  Manageur[1] role manageur;
  Autoroute[0..*] role autoroutes;
end

association  AutorouteConvoi between
  Autoroute[1] role autoroute;
  Convoi[0..*] role convois;
end

association  AutorouteVehicule between
  Autoroute[0..1] role autoroute;
  Vehicule[0..*] role vehiculesLibres;
end

association convoiVehicules between
  Convoi[0..1] role convoi;
  Vehicule[1..*] role vehicules;
end

association convoiLeader between
  Vehicule[1] role vehiculeLeader;
  Convoi[0..1] role convoiLeader;
end

association vehiculeConducteur between
  Vehicule[0..1] role vehicule;
  Conducteur[0..1] role conducteur;
end

association vehiculeCamera between
  Vehicule[1] role vehicule;
  Camera[0..*] role camera;
end

association vehiculeSonar between
  Vehicule[1] role vehicule;
  Sonar[0..*] role sonar;
end


--
-- C O N S T R A I N T S
--

constraints

-- VehiculeAUnConducteurOuUnCapteur:
-- Un vehicule doit avoir un conducteur ou bien au moins un capteur (radar, camera, etc..).

context i:Vehicule
  inv VehiculeAUnConducteurOuUnCapteur:
         i.conducteur->notEmpty
      or i.sonar->notEmpty
      or i.camera->notEmpty


-- ConvoiAUnConducteurMinimum:
-- Un convoi doit avoir au moins un conducteur dans les vehicules du convoi.

context i:Convoi
  inv ConvoiAUnConducteurMinimum:
         i.vehicules->exists(e|e.conducteur->notEmpty)
      or i.vehiculeLeader.conducteur->notEmpty


-- LeaderIsInVehiculesList:
-- Le leader doit etre present dans la liste de vehicule.

context i:Convoi
  inv LeaderIsInVehiculesList:
         i.vehicules->select(v|v = i.vehiculeLeader)->notEmpty


-- ConvoiADesVehiculesDansLaMemeDirection:
-- Un convoi ne contient que des vehicules allant dans la meme direction.

context i:Convoi
  inv ConvoiADesVehiculesDansLaMemeDirection:
         i.vehicules.Direction->flatten()->asSet()->size() = 1


-- VehiculeAUneDirectionValide:
-- Un vehicule a toujours une direction valide.

context i:Vehicule
  inv VehiculeAUneDirectionValide:
         Set {i.Direction}->intersection(Set {'A','B'})->notEmpty

