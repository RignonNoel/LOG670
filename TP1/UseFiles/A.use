model GestionConvoi

--
-- C L A S S E S
--

class Manageur
operations
    -- Un convoi est actil si il contient au moins un vehivule.
    -- Bien que notre architecture defini un convoi comme un
    -- convoi necessairement actif, voici a quoi aurais ressembler
    -- une requete plus complexe
    listeConvoisActifs() : Set(Convoi) = self.autoroutes.convois->flatten()->select(c | c.vehicules->size() > 1)->asSet()
end

class Autoroute
attributes
Nom : String
Numero : Integer

operations
    -- Dissout un convoi et reassigne la totalite de ses voitures directement sur l'autoroute
    -- On ne peux dissoudre que les convoi present sur l'autoroute faisant l'appel
    dissoudre(c:Convoi) begin
        for v in c.vehicules do
            insert (c.autoroute, v) into AutorouteVehicule;
        end;
        delete (c.autoroute, c) from AutorouteConvoi;
        destroy c
    end
    pre: c.autoroute = self
    post: c = Undefined

    -- Cree et ajoute un convoi sur l'autoroute
    addConvoi(vehicules: Set(Vehicule), leader: Vehicule) begin
        declare c : Convoi;
        c := new Convoi;
        insert (self, c) into AutorouteConvoi;
        for v in vehicules do
            insert (c, v) into convoiVehicules;
            delete (self, v) from AutorouteVehicule;
        end;
        insert (leader,c) into convoiLeader;
    end
    -- PRE : Verifie que tout les vehicules sont bien sur cette autoroute
    pre: vehicules->select(v|v.autoroute = self)->size() = vehicules->asSet()->size()
    -- PRE : Verifie que tout les vehicules sont dans la meme direction
    pre: vehicules.Direction->flatten()->asSet()->size() = 1
    -- PRE : Verifie si le leader est bien dans la liste de vehicule en attribut (verification des parametres)
    pre: vehicules->select(v|v = leader)->size() = 1
    -- POST : Verifie si la liste de vehicule dans le convoi est bonne
    post: leader.convoiLeader.vehicules->flatten()->asSet() = vehicules
    -- POST : Verifie que le nouveau convoi est bien sur cette autoroute
    post: leader.convoiLeader.autoroute->flatten()->asSet()->includes(self)

    -- Fusionne deux convoi en un seul (met le contenu du deuxieme dans le premier)
    fusionConvoi(convoi1: Convoi, convoi2: Convoi) begin
        for v in convoi2.vehicules do
            insert (convoi1, v) into convoiVehicules;
            delete (convoi2, v) from convoiVehicules;
        end;
        delete (convoi2.vehiculeLeader, convoi2) from convoiLeader;
        destroy convoi2;
    end
    -- PRE : Verifie si les deux convois sont bien sur la meme autoroute
    pre: convoi1.autoroute = convoi2.autoroute
    -- PRE : Verifie que les convois sont bien sur cette autoroute (on sait deja qu'ils sont sur la meme)
    pre: convoi1.autoroute->includes(self)
    -- PRE : Verifie que les deux convois vont dans la meme direction
    pre: convoi1.vehicules.Direction->flatten()->asSet() = convoi2.vehicules.Direction->flatten()->asSet()

    -- Split un convoi en 2
    splitConvoi(convoi: Convoi, vehicules: Set(Vehicule), leader: Vehicule) begin
        declare c : Convoi;
        c := new Convoi;
        insert (self, c) into AutorouteConvoi;
        for v in vehicules do
            insert (c, v) into convoiVehicules;
            delete (convoi, v) from convoiVehicules;
        end;
        insert (leader, c) into convoiLeader;
    end
    -- PRE : Verifie que le convoi est bien sur cette autoroute
    pre: convoi.autoroute->includes(self)
    -- PRE : Verifie que tout les vehicules de la liste offerte en parametre sont bien dans le convoi
    pre: vehicules->select(v|v.convoi = convoi)->flatten()->size() = vehicules->asSet()->size()
    -- PRE : Verifie que le leader est dans la liste de vehicule offert en parametre
    pre: vehicules->includes(leader)
    -- PRE : Verifie que le leader du nouveau convoi n'est pas le meme que le convoi actuel
    pre: convoi.vehiculeLeader->excludes(leader)
    -- POST : Verifie que le nouveau convoi comporte bien la bonne liste de vehicule
    post: leader.convoiLeader.vehicules->flatten()->asSet() = vehicules
    -- POST : Verifie que le convoi de base de contient plus aucune des voitures offerte en parametre
    post: convoi.vehicules->select(v|vehicules->includes(v))->isEmpty
end

class Conducteur
attributes
Nom : String
Sexe : Integer
end

class Vehicule
attributes
Direction : String

operations
    -- Quitte le convoi
    leaveConvoi() begin
        self.convoi.removeVehicule(self)
    end

    -- Rejoint un convoi
    joinConvoi(convoi: Convoi) begin
        convoi.addVehicule(self)
    end
end

class Convoi
operations
    -- Change le leader
    setLeader(leader: Vehicule) begin
        delete (self.vehiculeLeader, self) from convoiLeader;
        insert (leader, self) into convoiLeader;
    end
    pre : self.vehicules->includes(leader)
	pre : self.vehiculeLeader->excludes(leader)
    post : self.vehiculeLeader->includes(leader)

    -- Enleve un vehicule du convoi
    removeVehicule(vehicule: Vehicule) begin
        delete (self, vehicule) from convoiVehicules;
        insert (self.autoroute, vehicule) into AutorouteVehicule;
    end
    pre : self.vehicules->includes(vehicule)
    pre : self.vehiculeLeader->excludes(vehicule)
    post : self.vehicules->excludes(vehicule)

    -- Ajoute un vehicule au convoi
    addVehicule(vehicule: Vehicule) begin
        insert (self, vehicule) into convoiVehicules;
        delete (self.autoroute, vehicule) from AutorouteVehicule;
    end
    pre : self.vehicules->excludes(vehicule)
    pre : self.autoroute = vehicule.autoroute
    pre : vehicule.convoi = Undefined
    post : self.vehicules->includes(vehicule)
end

class Camera
attributes
Constructeur : String
Modele : String
end

class Sonar
attributes
Constructeur : String
Modele : String
end

--
-- A S S O C I A T I O N S
--

association  ManageurAutoroute between
  Manageur[1] role manageur;
  Autoroute[0..*] role autoroutes;
end

association  AutorouteConvoi between
  Autoroute[1] role autoroute;
  Convoi[0..*] role convois;
end

association  AutorouteVehicule between
  Autoroute[0..1] role autoroute;
  Vehicule[0..*] role vehiculesLibres;
end

association convoiVehicules between
  Convoi[0..1] role convoi;
  Vehicule[1..*] role vehicules;
end

association convoiLeader between
  Vehicule[1] role vehiculeLeader;
  Convoi[0..1] role convoiLeader;
end

association vehiculeConducteur between
  Vehicule[0..1] role vehicule;
  Conducteur[0..1] role conducteur;
end

association vehiculeCamera between
  Vehicule[1] role vehicule;
  Camera[0..*] role camera;
end

association vehiculeSonar between
  Vehicule[1] role vehicule;
  Sonar[0..*] role sonar;
end


--
-- C O N S T R A I N T S
--

constraints

-- VehiculeAUnConducteurOuUnCapteur:
-- Un vehicule doit avoir un conducteur ou bien au moins un capteur (radar, camera, etc..).

context i:Vehicule
  inv VehiculeAUnConducteurOuUnCapteur:
         i.conducteur->notEmpty
      or i.sonar->notEmpty
      or i.camera->notEmpty


-- ConvoiAUnConducteurMinimum:
-- Un convoi doit avoir au moins un conducteur dans les vehicules du convoi.

context i:Convoi
  inv ConvoiAUnConducteurMinimum:
         i.vehicules->exists(e|e.conducteur->notEmpty)
      or i.vehiculeLeader.conducteur->notEmpty


-- LeaderIsInVehiculesList:
-- Le leader doit etre present dans la liste de vehicule.

context i:Convoi
  inv LeaderIsInVehiculesList:
         i.vehicules->select(v|v = i.vehiculeLeader)->notEmpty


-- ConvoiADesVehiculesDansLaMemeDirection:
-- Un convoi ne contient que des vehicules allant dans la meme direction.

context i:Convoi
  inv ConvoiADesVehiculesDansLaMemeDirection:
         i.vehicules.Direction->flatten()->asSet()->size() = 1


-- VehiculeAUneDirectionValide:
-- Un vehicule a toujours une direction valide.

context i:Vehicule
  inv VehiculeAUneDirectionValide:
         Set {i.Direction}->intersection(Set {'A','B'})->notEmpty

-- VehiculeEstSurUneAutorouteOuDansUnConvoi:
-- Un vehicule est soit dans un convoi soit sur une autoroute mais pas les deux

context i:Vehicule
    inv VehiculeEstSurUneAutorouteOuDansUnConvoi:
        if i.autoroute->notEmpty
        then i.convoi = Undefined
        else i.convoi->notEmpty
        endif