<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int TEMPSATTENTEMAX = 200;

// Nombre de convoi par direction (toujours le meme de chaque cote)
const int N = 3;
typedef int[0,N-1] id_t;

// Tampons de requetes utilise pour chaque sens de circulation
int reqOrderA[N];
int reqOrderB[N];

// Longeur utilise des tampons de requetes
int reqOrderALen;
int reqOrderBLen;

// Masque binaire d'autorisation de passage sur le pont
int validA[N];
int validB[N];

clock bigestClock;

// Le nombre de camion presentement sur le pont (varie en fonction du convoi en traverse)
int camionSurPont;

// Horloge utilise pour changer la direction prioritaire apres un certains temps
clock directionTimer;

// La direction prioritaire actuel
bool direction;

clock Time;

// Channels de communication inter-templates
chan 
reqA[N],
reqB[N],
entreA[N], 
entreB[N],
sortieA[N], 
sortieB[N],
empty;

</declaration>
	<template>
		<name x="5" y="5">CAA</name>
		<parameter>int nbCamion, int index</parameter>
		<declaration>clock tempsAttente;</declaration>
		<location id="id0" x="-80" y="-280">
			<name x="-56" y="-280">SurPont</name>
		</location>
		<location id="id1" x="-80" y="-472">
			<name x="-48" y="-496">EnAttente</name>
		</location>
		<location id="id2" x="-560" y="-472">
			<name x="-592" y="-512">EnTransit</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-320" y="-504">reqA[index]!</label>
			<label kind="assignment" x="-352" y="-520">tempsAttente := 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-368" y="-352">sortieA[index]?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-48" y="-400">validA[index]==1</label>
			<label kind="synchronisation" x="-48" y="-376">entreA[index]!</label>
			<label kind="assignment" x="-48" y="-352">camionSurPont :=nbCamion</label>
		</transition>
	</template>
	<template>
		<name>CAB</name>
		<parameter>int nbCamion, int index</parameter>
		<declaration>clock tempsAttente;</declaration>
		<location id="id3" x="-184" y="-144">
			<name x="-144" y="-168">SurPont</name>
		</location>
		<location id="id4" x="-184" y="-336">
			<name x="-152" y="-360">EnAttente</name>
		</location>
		<location id="id5" x="-664" y="-336">
			<name x="-696" y="-376">EnTransit</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-440" y="-360">reqB[index]!</label>
			<label kind="assignment" x="-472" y="-376">tempsAttente := 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-496" y="-232">sortieB[index]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-152" y="-264">validB[index]==1</label>
			<label kind="synchronisation" x="-152" y="-240">entreB[index]!</label>
			<label kind="assignment" x="-152" y="-216">camionSurPont :=nbCamion</label>
		</transition>
	</template>
	<template>
		<name>CTRLP</name>
		<declaration>// ID du convoi actuellement pris en charge par le controleur (Sur le pont, entrant ou sortant)
int id;

// Regarde si il existe au moins un request dans un tableau de requete offert en argument
bool AnyRequest(int array[N])
{
	int i = 0;
    	while (i &lt; N)
    	{
		if(array[i] != 0)
		{
			return true;
		}
		i++;
	}
	return false;
}

// Supprime la premiere requete du tampon(buffer) de requete A
int dequeueA()
{
	int value = reqOrderA[0];

        int i = 0;
        reqOrderALen -= 1;
        while (i &lt; reqOrderALen)
        {
                reqOrderA[i] = reqOrderA[i + 1];
                i++;
        }
        reqOrderA[i] = 0;

	return value;
}

// Supprime la premiere requete du tampon(buffer) de requete B
int dequeueB()
{
	int value = reqOrderB[0];

        int i = 0;
        reqOrderBLen -= 1;
        while (i &lt; reqOrderBLen)
        {
                reqOrderB[i] = reqOrderB[i + 1];
                i++;
        }
        reqOrderB[i] = 0;
	return value;
}

// Engage le premier convoi du tampon A sur le pont (utilise dequeueA())
void engageA()
{
	id = dequeueA();
	validA[id] = 1;	
	if(!direction)
	{
		direction = true;
		directionTimer = 0;
	}
}

// Engage le premier convoi du tampon B sur le pont  (utilise dequeueB())
void engageB()
{
	id = dequeueB();
	validB[id] = 1;	

	if(direction)
	{
		direction = false;
		directionTimer = 0;
	}
}</declaration>
		<location id="id6" x="-16" y="16">
			<name x="-64" y="32">ValidateTimer</name>
		</location>
		<location id="id7" x="320" y="8">
			<name x="344" y="0">ChooseNextDirection</name>
		</location>
		<location id="id8" x="-264" y="-208">
			<name x="-280" y="-240">ASortie</name>
		</location>
		<location id="id9" x="-256" y="240">
			<name x="-272" y="200">BSortie</name>
		</location>
		<location id="id10" x="32" y="240">
			<name x="24" y="256">BSurPont</name>
		</location>
		<location id="id11" x="96" y="-208">
			<name x="86" y="-238">ASurPont</name>
		</location>
		<location id="id12" x="160" y="184">
			<name x="184" y="184">BEntre</name>
		</location>
		<location id="id13" x="256" y="-184">
			<name x="280" y="-200">AEntre</name>
		</location>
		<location id="id14" x="-504" y="24">
			<name x="-568" y="-16">EnAttente</name>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="112" y="56">directionTimer &lt;= 100</label>
			<nail x="184" y="48"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="48" y="-56">directionTimer &gt; 100</label>
			<label kind="assignment" x="48" y="-32">direction = !direction,
directionTimer = 0</label>
			<nail x="-8" y="16"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-144" y="216">empty?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-440" y="137">sortieB[id]!</label>
			<label kind="assignment" x="-440" y="152">validB[id]:=0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-104" y="-240">empty?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-432" y="-152">sortieA[id]!</label>
			<label kind="assignment" x="-432" y="-136">validA[id]:=0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="assignment" x="80" y="224">engageB()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="assignment" x="160" y="-224">engageA()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id12"/>
			<label kind="guard" x="248" y="112">!direction</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="guard" x="320" y="-104">direction</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-312" y="128">!AnyRequest(reqOrderA) &amp;&amp; AnyRequest(reqOrderB)</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-288" y="-136">AnyRequest(reqOrderA) &amp;&amp; !AnyRequest(reqOrderB)</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id6"/>
			<label kind="guard" x="-368" y="0">AnyRequest(reqOrderA) &amp;&amp; AnyRequest(reqOrderB)</label>
		</transition>
	</template>
	<template>
		<name>P</name>
		<declaration>// Horloge utilise pour la traverse du pont
</declaration>
		<location id="id15" x="-312" y="144">
			<name x="-336" y="104">EnAttente</name>
		</location>
		<location id="id16" x="-496" y="56">
			<name x="-528" y="16">Sortie</name>
		</location>
		<location id="id17" x="24" y="88">
			<name x="14" y="58">Reseting</name>
		</location>
		<location id="id18" x="-200" y="-8">
			<name x="-232" y="-48">ConvoiSurPont</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-416" y="72">empty!</label>
			<nail x="-392" y="112"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-432" y="-32">Time &gt; 10 * camionSurPont</label>
			<nail x="-384" y="-8"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="select" x="-136" y="128">e : id_t</label>
			<label kind="synchronisation" x="-136" y="144">entreB[e]?</label>
			<nail x="-104" y="184"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="assignment" x="-80" y="0">Time:=0</label>
			<nail x="-48" y="32"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="select" x="-128" y="56">e : id_t</label>
			<label kind="synchronisation" x="-128" y="72">entreA[e]?</label>
			<nail x="-64" y="96"/>
		</transition>
	</template>
	<template>
		<name>RequestManager</name>
		<declaration>// Ajoute un nouveau convoi fournis en argument dans le tampon de requete A
void enqueueA(int element)
{
       reqOrderA[reqOrderALen++] = element;
}

// Ajoute un nouveau convoi fournis en argument dans le tampon de requete B
void enqueueB(int element)
{
       reqOrderB[reqOrderBLen++] = element;
}</declaration>
		<location id="id19" x="-952" y="-344">
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="select" x="-1112" y="-232">e : id_t</label>
			<label kind="synchronisation" x="-1112" y="-216">reqB[e]?</label>
			<label kind="assignment" x="-1112" y="-200">enqueueB(e)</label>
			<nail x="-964" y="-185"/>
			<nail x="-1096" y="-304"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="select" x="-864" y="-488">e : id_t</label>
			<label kind="synchronisation" x="-864" y="-472">reqA[e]?</label>
			<label kind="assignment" x="-896" y="-456">enqueueA(e)</label>
			<nail x="-816" y="-384"/>
			<nail x="-952" y="-472"/>
			<nail x="-992" y="-456"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
DirectionA1 = CAA(1,0);
DirectionB1 = CAB(2,0);

DirectionA2 = CAA(3,1);
DirectionB2 = CAB(4,1);

DirectionA3 = CAA(5,2);
DirectionB3 = CAB(6,2);

ControleurPont = CTRLP();
Pont = P();

RequestManager1 = RequestManager();

// List one or more processes to be composed into a system.
system DirectionA1, DirectionB1, DirectionA2, DirectionB2, DirectionA3, DirectionB3, Pont, ControleurPont, RequestManager1;

 gantt {
  A1: validA[0] == 1 -&gt; 1;
  A2: validA[1] == 1 -&gt; 2;
  A3: validA[2] == 1 -&gt; 3;
  B1: validB[0] == 1 -&gt; 4;
  B2: validB[1] == 1 -&gt; 5;
  B3: validB[2] == 1 -&gt; 6;
 }</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>P1 : Il n’y a pas de « deadlock »
			</comment>
		</query>
		<query>
			<formula>A[] (DirectionA1.SurPont || DirectionA2.SurPont || DirectionA3.SurPont) imply not (DirectionB1.SurPont || DirectionB2.SurPont || DirectionB3.SurPont)
			</formula>
			<comment>P2 : Il n’y a pas de collision (i.e. deux convois circulants en sens inverse) sur le pont.
			</comment>
		</query>
		<query>
			<formula>DirectionA1.EnAttente --&gt; DirectionA1.SurPont
			</formula>
			<comment>P3 : Le pont est juste et équitable (= « fair »). ( Devrais etre tester sur toute les directions)
			</comment>
		</query>
		<query>
			<formula>A[] not ((DirectionA1.EnAttente and DirectionA1.tempsAttente &gt; TEMPSATTENTEMAX) || (DirectionB1.EnAttente and DirectionB1.tempsAttente &gt; TEMPSATTENTEMAX))
			</formula>
			<comment>P4 : Un convoi qui arrive est certain de passer sur le pont à l’issue d’une durée bornée. (Devrais etre tester sur toute les directions)
			</comment>
		</query>
		<query>
			<formula>Pont.ConvoiSurPont --&gt; Pont.Sortie
			</formula>
			<comment>P5 : Lorsqu'un convoi entre sur le pont, il en ressort.
			</comment>
		</query>
	</queries>
</nta>
