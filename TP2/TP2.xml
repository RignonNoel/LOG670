<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Nombre de convoi par direction (toujours le meme de chaque cote)
const int N = 3;
typedef int[0,N-1] id_t;

// Tampons de requetes utilise pour chaque sens de circulation
int reqOrderA[N];
int reqOrderB[N];

// Longeur utilise des tampons de requetes
int reqOrderALen;
int reqOrderBLen;

// Masque binaire d'autorisation de passage sur le pont
int validA[N];
int validB[N];

// Le nombre de camion presentement sur le pont (varie en fonction du convoi en traverse)
int camionSurPont;

// Horloge utilise pour changer la direction prioritaire apres un certains temps
clock directionTimer;

// La direction prioritaire actuel
bool direction;

// Channels de communication inter-templates
chan 
reqA[N],
reqB[N],
entreA[N], 
entreB[N],
sortieA[N], 
sortieB[N],
empty;

</declaration><template><name x="5" y="5">CAA</name><parameter>int nbCamion, int index</parameter><declaration>// Place local declarations here.

</declaration><location id="id0" x="-80" y="-280"><name x="-40" y="-304">SurPont</name></location><location id="id1" x="-80" y="-472"><name x="-48" y="-496">EnAttente</name></location><location id="id2" x="-560" y="-472"><name x="-592" y="-512">EnTransit</name></location><init ref="id2"/><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="-320" y="-504">reqA[index]!</label></transition><transition><source ref="id0"/><target ref="id2"/><label kind="synchronisation" x="-368" y="-352">sortieA[index]?</label></transition><transition><source ref="id1"/><target ref="id0"/><label kind="guard" x="-48" y="-400">validA[index]==1</label><label kind="synchronisation" x="-48" y="-376">entreA[index]!</label><label kind="assignment" x="-48" y="-352">camionSurPont :=nbCamion</label></transition></template><template><name>CAB</name><parameter>int nbCamion, int index</parameter><declaration>// Place local declarations here.</declaration><location id="id3" x="-184" y="-144"><name x="-144" y="-168">SurPont</name></location><location id="id4" x="-184" y="-336"><name x="-152" y="-360">EnAttente</name></location><location id="id5" x="-664" y="-336"><name x="-696" y="-376">EnTransit</name></location><init ref="id5"/><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-440" y="-360">reqB[index]!</label></transition><transition><source ref="id3"/><target ref="id5"/><label kind="synchronisation" x="-496" y="-232">sortieB[index]?</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="-152" y="-264">validB[index]==1</label><label kind="synchronisation" x="-152" y="-240">entreB[index]!</label><label kind="assignment" x="-152" y="-216">camionSurPont :=nbCamion</label></transition></template><template><name>CTRLP</name><declaration>// ID du convoi actuellement pris en charge par le controleur (Sur le pont, entrant ou sortant)
int id;

// Regarde si il existe au moins un request dans un tableau de requete offert en argument
bool AnyRequest(int array[N])
{
	int i = 0;
    	while (i &lt; N)
    	{
		if(array[i] != 0)
		{
			return true;
		}
		i++;
	}
	return false;
}

// Supprime la premiere requete du tampon(buffer) de requete A
int dequeueA()
{
	int value = reqOrderA[0];

        int i = 0;
        reqOrderALen -= 1;
        while (i &lt; reqOrderALen)
        {
                reqOrderA[i] = reqOrderA[i + 1];
                i++;
        }
        reqOrderA[i] = 0;

	return value;
}

// Supprime la premiere requete du tampon(buffer) de requete B
int dequeueB()
{
	int value = reqOrderB[0];

        int i = 0;
        reqOrderBLen -= 1;
        while (i &lt; reqOrderBLen)
        {
                reqOrderB[i] = reqOrderB[i + 1];
                i++;
        }
        reqOrderB[i] = 0;
	return value;
}

// Engage le premier convoi du tampon A sur le pont (utilise dequeueA())
void engageA()
{
	id = dequeueA();
	validA[id] = 1;	
	if(!direction)
	{
		direction = true;
		directionTimer = 0;
	}
}

// Engage le premier convoi du tampon B sur le pont  (utilise dequeueB())
void engageB()
{
	id = dequeueB();
	validB[id] = 1;	

	if(direction)
	{
		direction = false;
		directionTimer = 0;
	}
}
</declaration><location id="id6" x="-32" y="16"><name x="-80" y="32">ValidateTimer</name></location><location id="id7" x="176" y="8"><name x="200" y="0">ChooseNextDirection</name></location><location id="id8" x="-264" y="-208"><name x="-280" y="-240">ASortie</name></location><location id="id9" x="-256" y="240"><name x="-272" y="200">BSortie</name></location><location id="id10" x="32" y="240"><name x="24" y="256">BSurPont</name></location><location id="id11" x="96" y="-208"><name x="86" y="-238">ASurPont</name></location><location id="id12" x="160" y="128"><name x="184" y="128">BEntre</name></location><location id="id13" x="152" y="-120"><name x="176" y="-136">AEntre</name></location><location id="id14" x="-504" y="24"><name x="-568" y="-16">EnAttente</name></location><init ref="id14"/><transition><source ref="id6"/><target ref="id7"/><label kind="guard" x="-8" y="64">directionTimer &lt;= 15000</label><nail x="56" y="64"/></transition><transition><source ref="id6"/><target ref="id7"/><label kind="guard" x="0" y="-56">directionTimer &gt; 15000</label><label kind="assignment" x="0" y="-88">direction = !direction,
directionTimer = 0</label><nail x="48" y="-32"/></transition><transition><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="-144" y="216">empty?</label></transition><transition><source ref="id9"/><target ref="id14"/><label kind="synchronisation" x="-440" y="137">sortieB[id]!</label><label kind="assignment" x="-440" y="152">validB[id]:=0</label></transition><transition><source ref="id11"/><target ref="id8"/><label kind="synchronisation" x="-104" y="-240">empty?</label></transition><transition><source ref="id8"/><target ref="id14"/><label kind="synchronisation" x="-432" y="-152">sortieA[id]!</label><label kind="assignment" x="-432" y="-136">validA[id]:=0</label></transition><transition><source ref="id12"/><target ref="id10"/><label kind="assignment" x="80" y="152">engageB()</label></transition><transition><source ref="id13"/><target ref="id11"/><label kind="assignment" x="128" y="-176">engageA()</label></transition><transition><source ref="id7"/><target ref="id12"/><label kind="guard" x="176" y="72">!direction</label></transition><transition><source ref="id7"/><target ref="id13"/><label kind="guard" x="176" y="-40">direction</label></transition><transition><source ref="id14"/><target ref="id12"/><label kind="guard" x="-368" y="88">!AnyRequest(reqOrderA) &amp;&amp; AnyRequest(reqOrderB)</label></transition><transition><source ref="id14"/><target ref="id13"/><label kind="guard" x="-352" y="-96">AnyRequest(reqOrderA) &amp;&amp; !AnyRequest(reqOrderB)</label></transition><transition><source ref="id14"/><target ref="id6"/><label kind="guard" x="-368" y="0">AnyRequest(reqOrderA) &amp;&amp; AnyRequest(reqOrderB)</label></transition></template><template><name>P</name><declaration>// Horloge utilise pour la traverse du pont
clock Time;</declaration><location id="id15" x="-304" y="112"><name x="-328" y="72">EnAttente</name></location><location id="id16" x="-496" y="48"><name x="-528" y="8">Sortie</name></location><location id="id17" x="24" y="88"><name x="14" y="58">Reseting</name></location><location id="id18" x="-224" y="8"><name x="-256" y="-32">ConvoiSurPont</name></location><init ref="id15"/><transition><source ref="id16"/><target ref="id15"/><label kind="synchronisation" x="-416" y="72">empty!</label><nail x="-392" y="112"/></transition><transition><source ref="id18"/><target ref="id16"/><label kind="guard" x="-472" y="-32">Time &gt; camionSurPont * 1000</label><nail x="-384" y="-8"/></transition><transition><source ref="id15"/><target ref="id17"/><label kind="select" x="-136" y="128">e : id_t</label><label kind="synchronisation" x="-136" y="144">entreB[e]?</label><nail x="-104" y="184"/></transition><transition><source ref="id17"/><target ref="id18"/><label kind="assignment" x="-80" y="0">Time:=0</label><nail x="-48" y="32"/></transition><transition><source ref="id15"/><target ref="id17"/><label kind="select" x="-128" y="56">e : id_t</label><label kind="synchronisation" x="-128" y="72">entreA[e]?</label><nail x="-64" y="96"/></transition></template><template><name>RequestManager</name><declaration>// Ajoute un nouveau convoi fournis en argument dans le tampon de requete A
void enqueueA(int element)
{
       reqOrderA[reqOrderALen++] = element;
}

// Ajoute un nouveau convoi fournis en argument dans le tampon de requete B
void enqueueB(int element)
{
       reqOrderB[reqOrderBLen++] = element;
}</declaration><location id="id19" x="-952" y="-344"></location><init ref="id19"/><transition><source ref="id19"/><target ref="id19"/><label kind="select" x="-1112" y="-232">e : id_t</label><label kind="synchronisation" x="-1112" y="-216">reqB[e]?</label><label kind="assignment" x="-1112" y="-200">enqueueB(e)</label><nail x="-964" y="-185"/><nail x="-1096" y="-304"/></transition><transition><source ref="id19"/><target ref="id19"/><label kind="select" x="-864" y="-488">e : id_t</label><label kind="synchronisation" x="-864" y="-472">reqA[e]?</label><label kind="assignment" x="-896" y="-456">enqueueA(e)</label><nail x="-816" y="-384"/><nail x="-952" y="-472"/><nail x="-992" y="-456"/></transition></template><system>// Place template instantiations here.
DirectionA1 = CAA(8,0);
DirectionB1 = CAB(7,0);

DirectionA2 = CAA(10,1);
DirectionB2 = CAB(12,1);

DirectionA3 = CAA(5,2);
DirectionB3 = CAB(12,2);

ControleurPont = CTRLP();
Pont = P();

RequestManager1 = RequestManager();

// List one or more processes to be composed into a system.
system DirectionA1, DirectionB1, DirectionA2, DirectionB2, DirectionA3, DirectionB3, Pont, ControleurPont, RequestManager1;</system></nta>